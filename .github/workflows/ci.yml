name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint and Type Check
  lint-and-type-check:
    runs-on: ubuntu-latest
    name: Lint and Type Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          touch .env.test
          echo "DATABASE_URL=file:./test.db" >> .env.test
          echo "AUTH_SECRET=test-secret-key-for-ci-minimum-32-chars" >> .env.test
          echo "NEXTAUTH_SECRET=test-nextauth-secret-minimum-32-chars" >> .env.test
          echo "STRIPE_SECRET_KEY=sk_test_dummy_key_for_unit" >> .env.test
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_dummy_key_for_unit" >> .env.test
          echo "STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_unit" >> .env.test
          echo "UPSTASH_REDIS_REST_URL=redis://localhost:6379" >> .env.test
          echo "UPSTASH_REDIS_REST_TOKEN=dummy_token_for_unit" >> .env.test

      - name: Generate Prisma client
        run: npx prisma generate --schema=prisma/schema.ci.prisma

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: [lint-and-type-check, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test.example .env.test
          echo "APP_URL=http://localhost:3000" >> .env.test
          echo "DATABASE_URL=file:./test.db" >> .env.test
          echo "AUTH_SECRET=test-secret-key-for-ci-minimum-32-chars" >> .env.test
          echo "NEXTAUTH_SECRET=test-nextauth-secret-minimum-32-chars" >> .env.test
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test
          echo "RATE_LIMIT_ENABLED=false" >> .env.test
          echo "STRIPE_SECRET_KEY=sk_test_dummy_key_for_e2e" >> .env.test
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_dummy_key_for_e2e" >> .env.test
          echo "STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_e2e" >> .env.test
          echo "UPSTASH_REDIS_REST_URL=redis://localhost:6379" >> .env.test
          echo "UPSTASH_REDIS_REST_TOKEN=dummy_token_for_e2e" >> .env.test
          echo "FROM_EMAIL=test@example.com" >> .env.test
          echo "RESEND_API_KEY=test_resend_api_key" >> .env.test
          echo "AWS_ACCESS_KEY_ID=test_aws_access_key" >> .env.test
          echo "AWS_SECRET_ACCESS_KEY=test_aws_secret_key" >> .env.test
          echo "AWS_REGION=us-east-1" >> .env.test
          echo "S3_USER_BUCKET=test-bucket" >> .env.test
          echo "NEXT_PUBLIC_CLOUDFRONT_PUBLIC_URL=https://test.cloudfront.net" >> .env.test

      - name: Generate Prisma client and setup database
        run: |
          npx prisma generate --schema=prisma/schema.ci.prisma
          npx prisma db push --schema=prisma/schema.ci.prisma --accept-data-loss
          npm run test:setup

      - name: Build application
        run: |
          # Skip database migration for CI build
          npx prisma generate --schema=prisma/schema.ci.prisma
          npx next build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Start application in background
        run: |
          npm start &
          echo $! > .app_pid
        env:
          NODE_ENV: test

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Stop application
        if: always()
        run: |
          if [ -f .app_pid ]; then
            kill $(cat .app_pid) || true
          fi

      - name: Cleanup test environment
        if: always()
        run: npm run test:cleanup

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Build Check
  build-check:
    runs-on: ubuntu-latest
    name: Build Check
    needs: [lint-and-type-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup build environment
        run: |
          touch .env.production
          echo "DATABASE_URL=file:./build.db" >> .env.production
          echo "AUTH_SECRET=build-secret-key-minimum-32-chars" >> .env.production
          echo "NEXTAUTH_SECRET=build-nextauth-secret-minimum-32-chars" >> .env.production
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.production
          echo "STRIPE_SECRET_KEY=sk_test_dummy_key_for_build" >> .env.production
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_dummy_key_for_build" >> .env.production
          echo "STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_build" >> .env.production
          echo "UPSTASH_REDIS_REST_URL=redis://localhost:6379" >> .env.production
          echo "UPSTASH_REDIS_REST_TOKEN=dummy_token_for_build" >> .env.production
          echo "FROM_EMAIL=build@example.com" >> .env.production
          echo "RESEND_API_KEY=build_resend_api_key" >> .env.production
          echo "AWS_ACCESS_KEY_ID=build_aws_access_key" >> .env.production
          echo "AWS_SECRET_ACCESS_KEY=build_aws_secret_key" >> .env.production
          echo "AWS_REGION=us-east-1" >> .env.production
          echo "S3_USER_BUCKET=build-bucket" >> .env.production
          echo "NEXT_PUBLIC_CLOUDFRONT_PUBLIC_URL=https://build.cloudfront.net" >> .env.production

      - name: Generate Prisma client
        run: npx prisma generate --schema=prisma/schema.ci.prisma

      - name: Build application
        run: |
          # Skip database operations for build check
          npx prisma generate --schema=prisma/schema.ci.prisma
          npx next build
        env:
          SKIP_ENV_VALIDATION: true

  # Deploy to Vercel (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [unit-tests, e2e-tests, build-check, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.preview-url }}"
          echo "Checking deployment health at: $DEPLOYMENT_URL"
          
          # Check if deployment is accessible
          if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
            echo "✅ Deployment is accessible"
          else
            echo "❌ Deployment health check failed"
            exit 1
          fi

  # Deploy Preview (for PRs)
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    needs: [unit-tests, build-check]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true